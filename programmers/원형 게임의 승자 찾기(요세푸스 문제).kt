/**
 * 원형 게임의 승자 찾기
 * n명의 친구들이 게임을 하고 있습니다. 친구들은 시계방향으로 1부터 n까지 번호가 매겨진 원형으로 앉아 있습니다. 더 자세히 말하면, 1번 친구에서 시계방향으로 i번째 친구로 이동하면 (i+1)번째 친구가 되고, n번째 친구에서 시계방향으로 이동하면 1번째 친구가 됩니다.
 * 게임의 규칙은 다음과 같습니다:
 *
 * 1. 1번째 친구에서 시작합니다.
 * 2. 시계방향으로 k명의 친구를 세어나갑니다. 이때 세는 과정이 원형을 돌아가며 어떤 친구는 여러 번 세어질 수 있습니다.
 * 3. 마지막으로 세어진 친구는 원에서 빠져나가게 되어 게임에서 졌습니다.
 * 4. 아직 원에 두 명 이상의 친구가 남아 있다면, 방금 게임에서 졌던 친구의 바로 다음 친구에서부터 다시 2단계를 반복합니다.
 * 5. 마지막으로 원에 남은 친구가 게임의 승자가 됩니다.
 * n명의 친구 수와 정수 k가 주어졌을 때, 게임의 승자를 반환하는 프로그램을 작성하세요.
 */

class Solution {

    // helper 함수는 현재 남아있는 사람 수 n과 제거할 k번째 사람을 인자로 받습니다.
    // 이 함수는 재귀적으로 호출되어 최종 승자를 찾습니다.
    fun helper(n: Int, k: Int): Int {
        // n이 1이면 0을 반환합니다.
        // 이는 마지막으로 남은 사람이 승자이므로 인덱스 0을 반환합니다.
        if (n == 1) return 0
        // n이 1보다 크면 n-1명의 친구 수와 k를 이용하여 재귀적으로 승자를 찾습니다.
        // 이때 (helper(n - 1, k) + k) % n 을 통해 다음 제거될 친구의 인덱스를 계산합니다.
        return (helper(n - 1, k) + k) % n
    }

    // findTheWinner 함수는 n명의 친구 수와 정수 k를 인자로 받습니다.
    // 이 함수는 helper 함수를 호출하여 최종 승자를 찾고, 그 인덱스에 1을 더하여 반환합니다.
    fun findTheWinner(n: Int, k: Int): Int {
        // 1부터 n까지의 친구들 중에서 k번째 친구를 찾습니다.
        // helper 함수를 호출하여 최종 승자의 인덱스를 구한 뒤, 1을 더하여 반환합니다.
        return helper(n, k) + 1
    }
}
