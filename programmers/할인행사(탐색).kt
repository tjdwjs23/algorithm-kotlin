/**
 * XYZ 마트는 일정한 금액을 지불하면 10일 동안 회원 자격을 부여합니다. XYZ 마트에서는 회원을 대상으로 매일 한 가지 제품을 할인하는 행사를 합니다.
 * 할인하는 제품은 하루에 하나씩만 구매할 수 있습니다. 알뜰한 정현이는 자신이 원하는 제품과 수량이 할인하는 날짜와 10일 연속으로 일치할 경우에 맞춰서 회원가입을 하려 합니다.
 *
 * 예를 들어, 정현이가 원하는 제품이 바나나 3개, 사과 2개, 쌀 2개, 돼지고기 2개, 냄비 1개이며, XYZ 마트에서 14일간 회원을 대상으로 할인하는 제품이 날짜 순서대로 치킨, 사과, 사과, 바나나, 쌀, 사과, 돼지고기, 바나나, 돼지고기, 쌀, 냄비, 바나나, 사과, 바나나인 경우에 대해 알아봅시다.
 * 첫째 날부터 열흘 간에는 냄비가 할인하지 않기 때문에 첫째 날에는 회원가입을 하지 않습니다. 둘째 날부터 열흘 간에는 바나나를 원하는 만큼 할인구매할 수 없기 때문에 둘째 날에도 회원가입을 하지 않습니다. 셋째 날, 넷째 날, 다섯째 날부터 각각 열흘은 원하는 제품과 수량이 일치하기 때문에 셋 중 하루에 회원가입을 하려 합니다.
 *
 * 정현이가 원하는 제품을 나타내는 문자열 배열 want와 정현이가 원하는 제품의 수량을 나타내는 정수 배열 number, XYZ 마트에서 할인하는 제품을 나타내는 문자열 배열 discount가 주어졌을 때,
 * 회원등록시 정현이가 원하는 제품을 모두 할인 받을 수 있는 회원등록 날짜의 총 일수를 return 하는 solution 함수를 완성하시오. 가능한 날이 없으면 0을 return 합니다.
 */

class Solution {
    fun solution(want: Array<String>, number: IntArray, discount: Array<String>): Int {
        var answer: Int = 0 // 정현이가 회원등록을 할 수 있는 총 날짜 수를 저장하는 변수
        val wantMap = mutableMapOf<String, Int>() // 정현이가 원하는 제품과 수량을 저장하는 Map

        // 할인 리스트를 순회하는 반복문. 각각의 시작점에서 10일간의 할인 제품이 정현이의 원하는 리스트와 일치하는지 확인
        repeat(discount.size) {
            wantMap.clear() // 이전 반복에서 사용된 wantMap을 초기화
            repeat(want.size) { wantMap[want[it]] = number[it] } // 정현이가 원하는 제품과 수량을 wantMap에 저장

            var num = 0 // 현재 시작점에서 할인 받을 수 있는 제품의 수를 세는 변수
            for(i in it until discount.size) { // 현재 시작점에서부터 할인 리스트를 순회
                val food = discount[i] // 현재 확인하고 있는 할인 제품
                if(!wantMap.containsKey(food)) break // 할인 제품이 정현이가 원하는 제품 목록에 없으면 반복 중단
                if(wantMap[food] == 0) break // 해당 제품의 필요 수량을 이미 충족했다면 반복 중단
                wantMap[food] = wantMap[food]!! - 1 // 해당 제품의 남은 필요 수량을 1 감소
                num ++ // 할인 받을 수 있는 제품의 수를 1 증가
            }
            if (num == 10) answer ++ // 10일 동안 정현이가 원하는 모든 제품을 할인 받을 수 있다면, 가능한 날짜 수를 1 증가
        }

        return answer // 가능한 회원등록 날짜의 총 일수 반환
    }
}
