/**
 * 문제 설명
 * XX게임에는 피로도 시스템(0 이상의 정수로 표현합니다)이 있으며, 일정 피로도를 사용해서 던전을 탐험할 수 있습니다. 이때, 각 던전마다 탐험을 시작하기 위해 필요한 "최소 필요 피로도"와 던전 탐험을 마쳤을 때 소모되는 "소모 피로도"가 있습니다. "최소 필요 피로도"는 해당 던전을 탐험하기 위해 가지고 있어야 하는 최소한의 피로도를 나타내며, "소모 피로도"는 던전을 탐험한 후 소모되는 피로도를 나타냅니다. 예를 들어 "최소 필요 피로도"가 80, "소모 피로도"가 20인 던전을 탐험하기 위해서는 유저의 현재 남은 피로도는 80 이상 이어야 하며, 던전을 탐험한 후에는 피로도 20이 소모됩니다.
 *
 * 이 게임에는 하루에 한 번씩 탐험할 수 있는 던전이 여러개 있는데, 한 유저가 오늘 이 던전들을 최대한 많이 탐험하려 합니다. 유저의 현재 피로도 k와 각 던전별 "최소 필요 피로도", "소모 피로도"가 담긴 2차원 배열 dungeons 가 매개변수로 주어질 때, 유저가 탐험할수 있는 최대 던전 수를 return 하도록 solution 함수를 완성해주세요.
 *
 * 제한사항
 * k는 1 이상 5,000 이하인 자연수입니다.
 * dungeons의 세로(행) 길이(즉, 던전의 개수)는 1 이상 8 이하입니다.
 * dungeons의 가로(열) 길이는 2 입니다.
 * dungeons의 각 행은 각 던전의 ["최소 필요 피로도", "소모 피로도"] 입니다.
 * "최소 필요 피로도"는 항상 "소모 피로도"보다 크거나 같습니다.
 * "최소 필요 피로도"와 "소모 피로도"는 1 이상 1,000 이하인 자연수입니다.
 * 서로 다른 던전의 ["최소 필요 피로도", "소모 피로도"]가 서로 같을 수 있습니다
 */


class Solution {
    fun solution(k: Int, dungeons: Array<IntArray>): Int {
        var answer = 0 // 탐험한 던전의 최대 개수를 저장할 변수입니다.
        val visited = BooleanArray(dungeons.size) // 각 던전의 방문 여부를 추적하는 배열입니다.

        // 'dfs' 함수는 깊이 우선 탐색을 사용하여 가능한 모든 던전 조합을 탐색합니다.
        fun dfs(kk: Int, count: Int) {
            answer = maxOf(answer, count) // 현재까지 탐험한 던전의 수와 이전 최대값 중 더 큰 값을 선택합니다.
            dungeons.forEachIndexed { index, dungeon ->
                // 현재 던전을 방문하지 않았고, 현재 체력(kk)으로 진입할 수 있다면,
                if (!visited[index] && dungeon[0] <= kk) {
                    visited[index] = true // 해당 던전을 방문했다고 표시합니다.
                    // 다음 던전으로 재귀적으로 이동합니다. 이때, 체력을 소모하고, 탐험한 던전 수를 1 증가시킵니다.
                    dfs(kk - dungeon[1], count + 1)
                    visited[index] = false // 백트래킹: 이전 상태로 되돌립니다. 다른 경로를 탐색할 수 있게 합니다.
                }
            }
        }

        dfs(k, 0) // 초기 체력(k)과 탐험한 던전 수(0)으로 DFS 탐색을 시작합니다.
        return answer // 최대로 탐험할 수 있는 던전의 수를 반환합니다.
    }
}
