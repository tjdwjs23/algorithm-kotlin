/**
* 코니는 매일 다른 옷을 조합하여 입는것을 좋아합니다.
* 예를 들어 코니가 가진 옷이 아래와 같고, 오늘 코니가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야합니다.
* 종류	이름
* 얼굴	동그란 안경, 검정 선글라스
* 상의	파란색 티셔츠
* 하의	청바지
* 겉옷	긴 코트
* 코니는 각 종류별로 최대 1가지 의상만 착용할 수 있습니다. 예를 들어 위 예시의 경우 동그란 안경과 검정 선글라스를 동시에 착용할 수는 없습니다.
* 착용한 의상의 일부가 겹치더라도, 다른 의상이 겹치지 않거나, 혹은 의상을 추가로 더 착용한 경우에는 서로 다른 방법으로 옷을 착용한 것으로 계산합니다.
* 코니는 하루에 최소 한 개의 의상은 입습니다.
* 코니가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.
*/

class Solution {
    fun solution(clothes: Array<Array<String>>) = clothes
        .groupBy { it[1] } // 1. 옷을 종류별로 그룹화합니다. 이 때, 'it[1]'은 옷의 종류를 나타냅니다.
        .values // 2. 그룹화된 옷들의 값(즉, 실제 옷 정보)만을 가져옵니다.
        .map { it.size + 1 } // 3. 각 종류별로, 옷의 개수에 1을 더합니다. 여기서 1을 더하는 이유는 그 종류의 옷을 입지 않는 경우도 포함하기 위함입니다.
        .reduce(Int::times) // 4. 모든 종류의 옷에 대해, 각각의 경우의 수를 곱합니다. 이는 가능한 모든 조합의 수를 구하기 위함입니다.
        .minus(1) // 5. 마지막으로, 아무 옷도 입지 않는 경우는 제외해야 하므로 1을 빼줍니다.
}
