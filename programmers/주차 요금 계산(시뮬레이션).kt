/**
 * 문제 설명
 * 주차장의 요금표와 차량이 들어오고(입차) 나간(출차) 기록이 주어졌을 때, 차량별로 주차 요금을 계산하려고 합니다. 아래는 하나의 예시를 나타냅니다.
 *
 * 요금표
 * 기본 시간(분)	기본 요금(원)	단위 시간(분)	단위 요금(원)
 * 180	5000	10	600
 *
 *
 * 입/출차 기록
 * 시각(시:분)	차량 번호	내역
 * 05:34	5961	입차
 * 06:00	0000	입차
 * 06:34	0000	출차
 * 07:59	5961	출차
 * 07:59	0148	입차
 * 18:59	0000	입차
 * 19:09	0148	출차
 * 22:59	5961	입차
 * 23:00	5961	출차
 *
 *
 * 자동차별 주차 요금
 * 차량 번호	누적 주차 시간(분)	주차 요금(원)
 * 0000	34 + 300 = 334	5000 + ⌈(334 - 180) / 10⌉ x 600 = 14600
 * 0148	670	5000 +⌈(670 - 180) / 10⌉x 600 = 34400
 * 5961	145 + 1 = 146	5000
 * 어떤 차량이 입차된 후에 출차된 내역이 없다면, 23:59에 출차된 것으로 간주합니다.
 * 0000번 차량은 18:59에 입차된 이후, 출차된 내역이 없습니다. 따라서, 23:59에 출차된 것으로 간주합니다.
 * 00:00부터 23:59까지의 입/출차 내역을 바탕으로 차량별 누적 주차 시간을 계산하여 요금을 일괄로 정산합니다.
 * 누적 주차 시간이 기본 시간이하라면, 기본 요금을 청구합니다.
 * 누적 주차 시간이 기본 시간을 초과하면, 기본 요금에 더해서, 초과한 시간에 대해서 단위 시간 마다 단위 요금을 청구합니다.
 * 초과한 시간이 단위 시간으로 나누어 떨어지지 않으면, 올림합니다.
 * ⌈a⌉ : a보다 작지 않은 최소의 정수를 의미합니다. 즉, 올림을 의미합니다.
 * 주차 요금을 나타내는 정수 배열 fees, 자동차의 입/출차 내역을 나타내는 문자열 배열 records가 매개변수로 주어집니다. 차량 번호가 작은 자동차부터 청구할 주차 요금을 차례대로 정수 배열에 담아서 return 하도록 solution 함수를 완성해주세요.
 */

class Solution {
    fun solution(fees: IntArray, records: Array<String>): IntArray {
        val (기본시간, 기본요금, 단위시간, 단위요금) = fees
        val 입차시간 = hashMapOf<String, Int>()
        val 누적시간 = hashMapOf<String, Int>()

        // records를 순회하면서 입차시간과 누적시간을 계산합니다.
        records.forEach { record ->
            // 시간, 차량번호, 내역으로 분리합니다.
            val (시간, 차량번호, 내역) = record.split(" ")
            val (시, 분) = 시간.split(":").map(String::toInt)

            // 시간을 분 단위로 변환합니다.
            val 전체분 = 시 * 60 + 분
            if (내역 == "IN") 입차시간[차량번호] = 전체분
            else {
                // 출차시간이 없는 경우, 23:59로 간주합니다.
                입차시간.remove(차량번호)?.let {
                    val 주차시간 = 전체분 - it
                    누적시간[차량번호] = (누적시간[차량번호] ?: 0) + 주차시간
                }
            }
        }

        // 입차시간이 있는 차량에 대해 주차 요금을 계산합니다.
        입차시간.forEach { (차량번호, 시간) ->
            val 주차시간 = (23 * 60 + 59) - 시간
            누적시간.merge(차량번호, 주차시간, Int::plus)
        }

        // 주차 요금을 계산합니다.
        return 누적시간.keys.sorted().map { 차량번호 ->
            // 차량별 누적 주차 시간을 가져옵니다.
            val 주차시간 = 누적시간[차량번호]!!
            // 기본시간이 누적시간보다 작거나 같다면, 기본요금을 청구합니다.
            if (주차시간 <= 기본시간) 기본요금
            // 그 외의 경우, 기본요금에 단위요금을 추가로 청구합니다. (올림처리를위해 단위시간 - 1로 나누어 올림합니다.)
            else 기본요금 + ((주차시간 - 기본시간 + 단위시간 - 1) / 단위시간) * 단위요금
        }.toIntArray()
    }
}