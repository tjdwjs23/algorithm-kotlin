/**
 * 문제
 * 한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다. 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자. 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다.
 *
 * 입력
 * 첫째 줄에 회의의 수 N(1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다. 시작 시간과 끝나는 시간은 231-1보다 작거나 같은 자연수 또는 0이다.
 *
 * 출력
 * 첫째 줄에 최대 사용할 수 있는 회의의 최대 개수를 출력한다.
 */

fun main() = System.`in`.bufferedReader().run {
    val num = readln().toInt() // 회의의 수
    val meetings = List(num) { readln().split(" ").map { it.toInt() } }
        .sortedWith(compareBy({ it[1] }, { it[0] })) // 회의 리스트를 정렬 (끝나는 시간 오름차순, 시작 시간 오름차순)

    var end = meetings.first()[1] // 첫 번째 회의의 끝나는 시간으로 초기화
    var count = 1 // 첫 번째 회의는 이미 카운트된 상태로 시작

    // meetings 리스트에서 첫 번째 요소를 제외한 나머지 리스트
    meetings.drop(1).forEach { meeting ->
        if (end <= meeting[0]) { // 현재 회의의 시작 시간이 이전 회의의 끝나는 시간보다 같거나 늦은 경우
            end = meeting[1] // 끝나는 시간을 갱신
            count++ // 회의 개수 카운트
        }
    }

    println(count) // 사용할 수 있는 회의의 최대 개수 출력
}
