/**
 * Day Of Mourning의 기타리스트 강토가 사용하는 기타에서 N개의 줄이 끊어졌다. 따라서 새로운 줄을 사거나 교체해야 한다. 강토는 되도록이면 돈을 적게 쓰려고 한다. 6줄 패키지를 살 수도 있고, 1개 또는 그 이상의 줄을 낱개로 살 수도 있다.
 *
 * 끊어진 기타줄의 개수 N과 기타줄 브랜드 M개가 주어지고, 각각의 브랜드에서 파는 기타줄 6개가 들어있는 패키지의 가격, 낱개로 살 때의 가격이 주어질 때, 적어도 N개를 사기 위해 필요한 돈의 수를 최소로 하는 프로그램을 작성하시오.
 */

fun main() = System.`in`.bufferedReader().run {
    // n은 끊어진 기타줄의 수, m은 기타줄 브랜드의 수입니다.
    val (N, M) = readln().split(" ").map { it.toInt() }
    var minSix = Int.MAX_VALUE  // 모든 브랜드 중 최소 패키지(6개 묶음) 가격을 저장합니다.
    var minOne = Int.MAX_VALUE  // 모든 브랜드 중 최소 낱개 가격을 저장합니다.
    var result = 0  // 최종 계산된 가격을 저장할 변수입니다.

    // 각 브랜드별로 패키지 가격과 낱개 가격을 입력받아 최소값을 찾습니다.
    repeat(M) {
        val (six, one) = readln().split(" ").map { it.toInt() }

        minSix = minOf(minSix, six)  // 현재까지의 최소 패키지 가격과 비교하여 더 작은 값을 선택합니다.
        minOne = minOf(minOne, one)  // 현재까지의 최소 낱개 가격과 비교하여 더 작은 값을 선택합니다.
    }

    // 기타줄을 모두 구매하는데 필요한 최소 비용을 계산합니다.
    // 먼저, 필요한 기타줄 수를 6으로 나누어 패키지로 구매할 수 있는 최대 수를 구하고, 그에 해당하는 최소 비용을 계산합니다.
    result += N / 6 * minOf(minSix, minOne * 6)
    // 남은 기타줄을 구매하는데 필요한 비용을 계산합니다. 남은 기타줄 수가 패키지 하나 가격보다 저렴할 경우 낱개로, 아니면 패키지로 구매합니다.
    result += minOf(N % 6 * minOne, minSix)

    println(result)  // 최종 계산된 가격을 출력합니다.
}
