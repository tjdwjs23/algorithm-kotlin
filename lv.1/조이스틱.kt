/**
 * 조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
 * ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA
 * 조이스틱을 각 방향으로 움직이면 아래와 같습니다.
 * ▲ - 다음 알파벳
 * ▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)
 * ◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)
 * ▶ - 커서를 오른쪽으로 이동 (마지막 위치에서 오른쪽으로 이동하면 첫 번째 문자에 커서)
 * 예를 들어 아래의 방법으로 "JAZ"를 만들 수 있습니다.
 * - 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.
 * - 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.
 * - 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.
 * 따라서 11번 이동시켜 "JAZ"를 만들 수 있고, 이때가 최소 이동입니다.
 * 만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.
 */

class Solution {
    // 주 함수 solution에서 greedy 함수를 호출하여 결과값을 반환합니다.
    fun solution(name: String): Int {
        return greedy(name)
    }
}

fun greedy(name: String): Int {
    // name의 길이
    val n = name.length
    // 기본적으로 오른쪽으로만 이동하는 경우의 초기 이동 횟수 설정
    var move = n - 1 

    // 총 조작 횟수를 저장할 변수
    var answer = 0
    for (i in name.indices) {
        // 상하 조작 횟수 계산: 알파벳을 A에서 목표 알파벳으로 변경하는데 필요한 최소 횟수
        answer += minOf(name[i] - 'A', 'Z' - name[i] + 1)

        // 현재 문자 다음에 위치한 문자의 인덱스
        var next = i + 1
        // 다음 문자가 A인 동안 인덱스 증가 (A를 건너뛰기)
        while (next < n && name[next] == 'A') {
            next++
        }
        
        // 좌우 이동 최소 횟수 계산
        // i * 2 + n - next: 현재 위치에서 뒤로 돌아가서 남은 문자를 변경하는 경우
        // (n - next) * 2 + i: 뒤의 A를 모두 건너뛰고 남은 문자로 돌아오는 경우
        // 이 중 최소값을 move에 저장
        move = minOf(move, i * 2 + n - next, (n - next) * 2 + i)
    }

    // 총 조작 횟수 반환 (상하 조작 횟수 + 좌우 이동 횟수)
    return answer + move
}
